# -*- coding: utf-8 -*-
"""deploy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iE4nO4jy4PcMb15PFym6qS24WWm-8QRO
"""

pip install streamlit
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.tree import DecisionTreeRegressor, DecisionTreeClassifier
from sklearn.metrics import mean_squared_error, accuracy_score, f1_score, confusion_matrix
from keras.models import Sequential
from keras.layers import Dense
import streamlit as st  # Importing Streamlit

# Step 1: Load the dataset
df = pd.read_csv('student-mat.csv', sep=';')  # Adjust path as needed

# Step 2: Data preprocessing
# Convert categorical variables to numeric using Label Encoding
categorical_columns = ['school', 'sex', 'address', 'famsize', 'Pstatus', 'Mjob', 'Fjob', 'reason', 'guardian', 'schoolsup', 'famsup', 'paid', 'activities', 'nursery', 'higher', 'internet', 'romantic']

for col in categorical_columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])

# Step 3: Feature and target selection
X = df.drop(columns=['G3'])  # Features
y = df['G3']  # Target (final grade)

# Step 4: Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Train Decision Tree Model
dt_model = DecisionTreeRegressor(random_state=42)
dt_model.fit(X_train, y_train)

# Step 6: Train ANN Model
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

ann_model = Sequential([
    Dense(64, input_dim=X_train.shape[1], activation='relu'),
    Dense(32, activation='relu'),
    Dense(1, activation='linear')
])

ann_model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mean_squared_error'])
ann_model.fit(X_train_scaled, y_train, epochs=50, batch_size=32, validation_split=0.2, verbose=1)

# Streamlit application
st.title("Student Grade Prediction")
st.write("Enter the student details below to predict the final grade using Decision Tree and ANN models.")

# Input fields for user input
user_input = {}
for col in X.columns:
    user_input[col] = st.text_input(f"Enter {col}:", value="0")

# Convert user input to DataFrame
input_df = pd.DataFrame([user_input], columns=X.columns)
input_df = input_df.apply(pd.to_numeric, errors='coerce').fillna(0)

# Scale the input for ANN
input_scaled = scaler.transform(input_df)

# Predict using both models
dt_prediction = dt_model.predict(input_df)[0]
ann_prediction = ann_model.predict(input_scaled)[0][0]

# Display predictions
st.write("### Predictions")
st.write(f"**Decision Tree Prediction:** {dt_prediction}")
st.write(f"**ANN Prediction:** {ann_prediction}")
